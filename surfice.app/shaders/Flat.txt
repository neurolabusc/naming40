//pref
Ambient|float|0.0|0.5|1
Diffuse|float|0.0|0.7|1
Specular|float|0.0|0.2|1
Shininess|float|1|60|120
LightBackfaces|bool|false
Per-facet instead of per-pixel shading. Useful for evaluating mesh quality. Copyright 2015 Chris Rorden, BSD2clause.|note
//vert
#version 330
layout(location = 0) in vec3 Vert;
layout(location = 3) in vec3 Norm;
layout(location = 6) in vec4 Clr;
flat out vec3 vN, vL, vV;
out vec4 vClr, vP;
uniform mat4 ModelViewProjectionMatrix;
uniform mat4 ModelViewMatrix;
uniform mat3 NormalMatrix;
uniform vec3 LightPos = vec3(0.0, 20.0, 30.0); //LR, -DU+, -FN+
void main() {
    vN = normalize((NormalMatrix * Norm));
    vP = vec4(Vert, 1.0);
    gl_Position = ModelViewProjectionMatrix * vec4(Vert, 1.0);
    vL = normalize(LightPos);
    vV = -vec3(ModelViewMatrix*vec4(Vert,1.0));
    //vN = (dot(vN,vV.rgb) < 0.0) ? -vN : vN; //double sided light
    vClr = Clr;
}
//frag
#version 330
in vec4 vClr, vP;
flat in vec3 vN, vL, vV;
out vec4 color;
uniform float Ambient = 0.5;
uniform float Diffuse = 0.7;
uniform float Specular = 0.2;
uniform float Shininess = 60.0;
uniform vec4 ClipPlane = vec4(2.0, 0.0, 0.0, 0.0);
uniform bool LightBackfaces;

void main() {
	if ((ClipPlane[0] < 1.5) && (dot( ClipPlane, vP) > 0.0)) discard;
	vec3 l = normalize(vL);
	vec3 n = normalize(vN);
	vec3 h = normalize(l+normalize(vV));
	vec3 a = vClr.rgb;
	vec3 d = a;
	if (LightBackfaces)
		n = (dot(n,vV) < 0.0) ? -n : n; //double sided light
	float diff = dot(n,l);
	float spec = pow(max(0.0,dot(n,h)), Shininess);
	vec3 backcolor = Ambient*vec3(0.1+0.1+0.1) + d*abs(diff)*Diffuse;
	float backface = step(0.00, n.z);
	color = vec4(mix(backcolor.rgb, a*Ambient + d*diff*Diffuse + spec*Specular,  backface), 1.0);
}